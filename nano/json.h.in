#ifndef NANO_JSON_H
#define NANO_JSON_H

/* ------------------------------------------------------------------------ */
#cmakedefine JSON_FLOATS
#cmakedefine JSON_64BITS_INTEGERS
#cmakedefine JSON_HEX_NUMBERS
#cmakedefine JSON_PACKED
#cmakedefine JSON_SHORT_NEXT

#cmakedefine JSON_AUTO_PARSE_FN
#cmakedefine JSON_STRINGIFY_FN
#cmakedefine JSON_GET_FN

#define JSON_AUTO_PARSE_POOL_START_SIZE  (@JSON_AUTO_PARSE_POOL_START_SIZE@)
#define JSON_AUTO_PARSE_POOL_INCREASE(n) (@JSON_AUTO_PARSE_POOL_INCREASE@)

#define JSON_MAX_ID_LENGTH               (@JSON_MAX_ID_LENGTH@)

#ifdef JSON_FLOATS
#include "math.h"
#endif

typedef
enum {
	JS_UNDEFINED = 1, JS_NULL, JS_BOOLEAN, JS_NUMBER, JS_FLOAT, JS_STRING, JS_ARRAY, JS_OBJECT
} nj_type_t;


#ifdef JSON_64BITS_INTEGERS
typedef int64_t jsn_number_t;
#else
typedef int32_t jsn_number_t;
#endif

#ifdef JSON_SHORT_NEXT
typedef short jsn_next_t;
#else
typedef int jsn_next_t;
#endif


/* ------------------------------------------------------------------------ */
/* JSON node                                                                */

typedef
struct jsn {
	union {
		char *string;        /* string id of the node in object    */
		unsigned int number; /* integer index of the node in array */
	} id;
	union {
		jsn_number_t number;
		char *string;
		jsn_next_t length;/* number of object/array elements */
#ifdef JSON_FLOATS
		double floating;
#endif
	} data;
	jsn_next_t next;     /* index offset to next sibling node (0 - parent node offset) */
	char id_type;        /* type of id. JS_NUMBER(in array) or JS_STRING(in object)    */
	char type;           /* type of data (nj_type_t)                                   */
}
#ifdef JSON_PACKED
__attribute__((packed))
#endif
jsn_t;



/* ------------------------------------------------------------------------ */
/* main functions                                                           */

int json_parse(jsn_t *pool, size_t size, /* <-- */ char *text);

#ifdef JSON_AUTO_PARSE_FN
jsn_t *json_auto_parse(char *text, char **end);
#endif

#ifdef JSON_STRINGIFY_FN
char *json_stringify(char *outbuf, size_t size, /* <-- */ jsn_t *root);
#endif

#ifdef JSON_GET_FN
jsn_t *json_get(jsn_t *obj, char const *path);
#endif


/* ------------------------------------------------------------------------ */
/* node functions                                                           */

int          json_boolean(jsn_t *node, int absent);
jsn_number_t json_number (jsn_t *node, jsn_number_t absent);
char const  *json_string (jsn_t *node, char const *absent);

#ifdef JSON_FLOATS
double       json_float  (jsn_t *node, double absent);
#endif



/* ------------------------------------------------------------------------ */
/* array/object functions                                                   */

int json_length(jsn_t *obj);

jsn_t *json_item(jsn_t *obj, char const *id);
jsn_t *json_cell(jsn_t *obj, int index);


#define json_foreach(obj, offset) \
	if (obj->data.length) for (int offset = 1; offset > 0; offset = obj[offset].next)

/*
	json_foreach(obj, offset) {
		jsn_t *node = obj + offset;
		...
	}
*/



/* ------------------------------------------------------------------------ */
/* internal but may be usefull functions                                    */

int string_unescape(char *d, char *s);

#ifdef JSON_STRINGIFY_FN
char *string_escape(char *p, char *e, char const *s);
#endif

int match_number(char **p, jsn_t *obj);

#ifdef JSON_FLOATS
char *float2str(char *p, char *e, double f);
#endif



#ifdef JSON_64BITS_INTEGERS
#if LLONG_MAX == INT64_MAX
	#define JSN_NUMBER_FORMAT "%lli"
#else
#if LONG_MAX == INT64_MAX
	#define JSN_NUMBER_FORMAT "%li"
#else
	#error "impossible to choose of 64 bits number format function"
#endif
#endif

#else
#define JSN_NUMBER_FORMAT "%d"
#endif

#ifdef JSON_FLOATS
#define JSN_FLOAT_FORMAT "%.11f"
#endif


#endif
